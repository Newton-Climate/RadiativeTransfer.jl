#=
 
This file wraps `compute_aerosol_optical_properties` so that autodiff users and non-autodiff 
users can call the same function with just a keyword argument change. 

=#

""" Function used by auto-differentiation to convert a jacobian result to an AerosolOptics type"""
function convert_jacobian_result_to_aerosol_optics(result)
    
    value = result.value
    derivs = result.derivs[1]

    greek_length = Int64((length(value) - 2)/6)

    Œ± = value[1:greek_length]
    Œ≤ = value[greek_length + 1 : 2greek_length]
    Œ≥ = value[2greek_length + 1 : 3greek_length]
    Œ¥ = value[3greek_length + 1 : 4greek_length]
    œµ = value[4greek_length + 1 : 5greek_length]
    Œ∂ = value[5greek_length + 1 : 6greek_length]

    greek_coefs = GreekCoefs(Œ±, Œ≤, Œ≥, Œ¥, œµ, Œ∂)

    œâÃÉ = value[end-1]
    k = value[end]

    return AerosolOptics(greek_coefs=greek_coefs, œâÃÉ=œâÃÉ, k=k, derivs=derivs, f·µó=eltype(œâÃÉ)(1)) 
end

"""
    $(FUNCTIONNAME)(model::MieModel{FDT})

Reference: Suniti Sanghavi 2014, https://doi.org/10.1016/j.jqsrt.2013.12.015

This function enables user to specify whether to perform auto-differentiation (using either computation type)
Input: MieModel, holding all computation and aerosol properties & autodiff flag (whether to perform 
auto-differentiation)
Output: AerosolOptics, holding all Greek coefficients and Cross-Sectional information
"""
function compute_aerosol_optical_properties(model::MieModel ; autodiff=false)

    # This function takes in the "x-vector" along with the input model so that ForwardDiff will work
    function compute_aerosol_optical_properties_autodiff(x ; model::MieModel = model)

        if length(x) !== 4 
            @error "Must receive four aerosol parameters for auto-differentiation (Œº, œÉ, n·µ£, n·µ¢)" x
        end
    
        # Make sure that ùê± and model match
        @assert (model.aerosol.size_distribution.Œº == log(x[1]))
        @assert (model.aerosol.size_distribution.œÉ == log(x[2]))
        @assert (model.aerosol.n·µ£ == x[3])
        @assert (model.aerosol.n·µ¢ == x[4])

        # Unpack the model and aerosol 
        @unpack computation_type, aerosol, Œª, polarization_type, truncation_type, r_max, nquad_radius, wigner_A, wigner_B = model
        @unpack size_distribution, n·µ£, n·µ¢ = aerosol

        aerosol_x = Aerosol(LogNormal(log(x[1].value), log(x[2].value)), x[3].value, x[4].value)
        model_x = MieModel(computation_type, aerosol_x, Œª, polarization_type, truncation_type, r_max, nquad_radius, wigner_A, wigner_B)
    
        aerosol_optics = compute_aerosol_optical_properties(model_x, ForwardDiff.Dual);
    
        return [aerosol_optics.greek_coefs.Œ± 
                aerosol_optics.greek_coefs.Œ≤ 
                aerosol_optics.greek_coefs.Œ≥ 
                aerosol_optics.greek_coefs.Œ¥ 
                aerosol_optics.greek_coefs.œµ 
                aerosol_optics.greek_coefs.Œ∂
                aerosol_optics.œâÃÉ
                aerosol_optics.k]
    end

    if (autodiff)

        x = [exp(model.aerosol.size_distribution.Œº), 
            exp(model.aerosol.size_distribution.œÉ), 
            model.aerosol.n·µ£, 
            model.aerosol.n·µ¢]

        # Get length of greek coefs
        r, w·µ£ = gauleg(model.nquad_radius, 0.0, model.r_max ; norm=true)
        N_max = get_n_max(2 * œÄ * model.r_max/ model.Œª)
        greek_length = 2 * N_max - 1

        result = DiffResults.JacobianResult(zeros(6 * greek_length + 2), x)
        ForwardDiff.jacobian!(result, compute_aerosol_optical_properties_autodiff, x);
        return convert_jacobian_result_to_aerosol_optics(result);

    else 
        return compute_aerosol_optical_properties(model)
    end

end